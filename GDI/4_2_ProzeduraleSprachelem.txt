========================================================================================================252-309
Von-Neumann-Architektur: heute gebräuchlich		--------Speicher---------
	linear geordnter Speicher					|			|			|
	auf Speicher: Daten und Programme			|	|------CPU------|	|
											Eingabe-|Rechenwerk(ALU)|-Ausgabe
													|Steuerwerk		|
Programmabarbeitung:
	1. Lesen d.nächsten Programmanweisung und 2. Benötigter Daten aus d.Speicher
	3. Ausführung d.Anweisungen und 4. Schreiben d.Ergebnisse i.d.Speicher
-->Programmierkonzept:Sequenzielle Folge von Anweisungen/Zuweisungen(Anweisung kann Variablenzustand ändern)

==============ANWEISUNG(EXPRESSION):zentrales Element[statt Ausdruck(funkt.Sprachen)========================
<anweisung> ::= <variablendeklaration> | <zuweisung> | <anweisung> <anweisung> | <bedingte anweisung> | 
				<wiederholungsanweisung> | <prozeduraufruf> | <block>

======================================PROGRAMMVARIABLE/ZUWEISUNG============================================
Auswertung nach operationeller Semantik: 1.Werte d.Parameter, 2.Funktionsrumpf auf Parameterwerten
Besser: Ergebnis d.Funktionen in (gekennzeichnete)Variable zwischenspeichern, dann bei Bedarf nutzen

-Deklaration(Var): definiert Existenz, Name, Typ
-Definition(Var): Festlegen, Name und Typ einer Var, Anlegen im Speicher [var Name:Datentyp;]
-Zuweisung(Var): Festlegung/Änderung Wert einer Var [Variablenbezeichner = Ausdruck; (selber Typ)]
-Initialisierung(Var): Definition + Wertezuweisung [Datentyp Name = Wert;]
 Variable: textuell vor Verwendung definieren, dann Wiederverndung mögl

Semantik:
	Anweisung(vgl zu Ausdruck): hat keinen Wert, bewirkt Werteänderung einer Var: Zustand d.Var ändert sich
	Zustandsraum d.Programmdaten: durch alle def.Var eines Programms definiert: 
		Datenzustand d.Programms: Menge d.Werte aller Programmvariablen zu bestimmtem Zeitpunkt
		Variablendeklaration vergrößert Zustandsraum, Zuweisung ändert Variablenwert
	Auswerten einer Anweisung bedingt Zustandsänerung: vor Auswertung:Anfangszustand, danach:Endzustand

Variablendefinition: var id:t; Erweiterung d.betrachteten Zustandsraums d.Programmdaten um neue Var von typ t
Zuweisung: id=3; 1. Auswerten d.Ausdrucks e bei geg.Zustandsraum(Anfangszustand), 
	2. Ausführen d. Zuweisung: Ändern des Var.wertes der Var id im Zustandsraum auf Wert von e
	(falls e undefiniert: ges.Zustandsraum ist undefiniert -> symbolisiert nicht terminierendes Programm)

--------Sequenzielle Komposition: Hintereinanderausführen mehrerer Anweisungen [int x=0; x++; x*=x;]
Semantik: Anweisungen s1,s2, 
	1. Auswertung s1 mit geg. Zustandsraum(Anfangszustand)
	2. Auswertung s2 mit Zustandsraum nach Auswertung von s1(Endzustand von s1)

=======Bedingte Anweisung: Zuweisung in abh. des Werts einer Bedingung [if b then s1 else s2 fi]==========
Semantik(informell):
	falls Ausdruck b Wahrheitwert "true" hat: s1 / wenn "false": s2 / wenn "bottom": Zustandsraum undef.
Bedingte Anweisung: if x<0 then y=-x; else y=x; fi 	}
Bedingter Ausdruck: y= if x<0 then -x else x fi 	}gleichbedeutend

==========================================Wiederholungsanweisung==========================================
WHILE [while b do s od] 
	Quelltext wird mehrfach durchlaufen / gleiche ausgef. Struktur, ggf. andere Param-, Variablenwerte
	b=boolscher Ausdr/Bedingung der Wiederh.anweis./Eintrittsbedingung, s=Anweisung/Rumpf d.Wiederh.anweis.
Semantik: Wenn Ausdruck b im Anfangszustandsraum:
	1. false: keine Veränderung d.Zustandsraums/ 2. _|_: Zustandsraum undef. /
	3. true: Ausführen s mit Anfangszust.raum, 4. Zust.r. nach Ausf. von s=Anfangszustandsraum (5. repeat)

DO WHILE/REPEAT UNTIL [s while(b); = s; while(b)s / repeat Anweidung until(Bedinung)]
	Abbruchbedingung statt Eintrittsbedingung (Rumpf wird mind. einmal durchlaufen)

GEZÄHLTE WIEDERHOLUNG: [for (s1; b; s2) s3] :: Äquivalent zu [s1; while(b){s3; s2;}] (s=statement)
	Wiederholungsanzahl über Zählvariable gesteuert 
	b=boolscher Ausdruck, s1/s2/s3=Anweisungen(s1:Dekl./Init. d.Zählervar, s2: Änderung d.Zählervar)

=============================================Prozedurdefinition============================================
Kapselt Quelltextabschnitt zu unabh.Einheit, ermöglicht mehrfaches, redundanzloses Ausführen im Code 
Analog zu Funktion(funkt.Progr.spr.), aber: Rumpf=Anweisung(statt Ausdr.), kein Rückgabetyp("void")

proc p([var] x1:t1, ..., [var] xn:tn) begin e end
	-Schlüsselwort=Kennzeichen, -Identifikator(Name), -Prozedurrumpf(gekennzeichneter Anf.,Ende)
	-Param.liste("()"begrenzt): aus Paaren(Parametername,-typ), -opt.Schlüsselwort[var](Param.übergabe)
var ist optional, Prozedurergebnis indirekt über Parameter zurückgeben!!
Param. OHNE var^=form.Param: Übergabe eines Werts an Prozedur/durch Zuweisung veränderbar(manchmal erlaubt)
Param. MIT var = Bezeichner:Variablenparam., Belegung(Aufruf) nur mit Variable(nicht mit Konkr.Wert/Ausdruck)

Verwendung von Variablenparamtern(starke Unterschiede in Sprachen):
-Eingabeparameter(in): Parameter NICHT auf LINKER Zuweisungsseite: durch Prozedur nicht verändert!
-Ergebnisparameter(out): Param. NUR auf LINKER Zuweisungsseite: Wert vor Prozedurausführung: bedeutungslos
-Transienter param.(inout): Param. auf LINKER und RECHTER Zuweisungss., in AUSDRÜCKEN: Wert andern/auswert.

-------------------------------------------Prozeduraufruf-------------------------------------------------
proc p([var]x1:t1,...,[var]xn:tn) begin s end 	-	[en:beliebige Ausdrücke/xn:Var d.Typen tn]
wenn xi: var: e ist eine Variable  [Anwenden nur erlaubt, wenn Typkonform: alle 1<=i<=n: ei vom Typ ti]
	p(e1,...,en) ist Anweisung: Ausführung symbolisiert s von p auf Werten d.Ausdücke

Bedeutung: Prozeduraufruf: Abkürzungsmechanismus, hilft Redundanz zu vermeiden
Semantik(Ersatzdarstellung): p(x,e) ^= var b:t2 = e; s[x/a] 
	Notation s[x/a]: Ersetzung von a in ges.Rumpf s durch Var x(Teile durch a, mult. mit x)
Semantik(normale Param.übergabe): Call by value: 
	1.ausw.d.aktuellen Param.(Ausdücke auf Param.position), 2.auswerten: Prozedurrumpf
Semantik(Variablenparameter): Call by reference:
	Verwendung d.Argumentv. d.Aufrufs bei Rumpfauswertung, Ergebnisrückgabe indir.über Ausgabeparam. 
	=>Ändern:Variablenwert -> ändert Parameterwert in Aufrufumgebung

==============================================BLOCK=======================================================
-bisher pragmatische Bezeichnerverwendung, Elem. leicht überschaubar
-bei großen Programmen: mehrere Programmierer, überlappende Bezeichnerverwendung->Gültigkeitsbereiche
Strukturieren d.Programms in Blöcke, in Block def.Bezeichner: nur in diesem,darunterliegenden Block gültig
Regeln(form.Programmiersprachen): Gültigkeitsbereich, welches Programmelement benennt Bezeichner

Durch Programmstrukt.implizit def.Blöcke: Rumpf:Prozedur/Funktion/Wiederholungsanweisung/then-else-Zweig
Definition: Block einer Anweisung s: {s} (fiktive Program.sprache: begin s end;)

----------------------------------------------BINDUNG----------------------------------------------
-Lebensdauer(Bindung/Bezeichner): Block i.d.Bezeichner def, alle Unterblöcke
-Verschattung/Überlagerung eines Blocks: erneutes Binden in eingeschlossenen Block
-Gültigkeitsbereich(Bind./Bez.): Bez.lebensdauer - aller eingeschl.Blöcke i.d.Bez erneut verwendet
-Wiederverwendung(Programmstücke): Verschattung ist Voraussetzung, 
	Bindung an zugeh.Block macht Block "robust" gegenüber seiner Umwelt, Einsetzen in jedes Programm mögl.
	-->Bindungsstruktur: so einfach wie möglich => Durchschaubarkeit

-----Bindungskonzepte:
-Statische Bindung: Aufschreiben legt fest, welches sem.Programmelem. durch Bez. referenziert
	->zur Übersetzungszeit: eindeutig klar, welches Programmelem. gemeint
-Dynamische Bindung: Ablauf(Programm) entscheidend, welches sem.Programmelem. bezeichnet
	->Bindung:dynamisch zur Laufzeit (in Objektorientierten Sprachen)

----Polymorphie/Überladen: Bez. referenziert innerhalb eines Blocks untersch.Programmelemente
untersch.Bindungen für einen Bez. gültig, Konflikt:spätestens zur Programmlaufzeit aufgelöst

----Globale Variable: Programmvar: in Funktion/Prozedur verwendet, nicht im Rumpf/Param.liste def.
Definition im äußerem Block, 
Zuweisung im Prozedurrumpf führen zu Seiteneffekten in äußerem Block
	gefährlich:Änderungen nicht ausschließlich in Parameterschnittstelle
Prozeduren/Funktionen mit glob.Var nicht robust, nicht beliebig in anderen Programmen verwendbar
-->glob.Var vorsichtig verwenden / Zugriff:nur lesend, gut dokumentieren

======================================REKURSION/ITERATION========================================
Repetitive Rekursion: Wiederholte Anweisungsausführung(durch Rekursion/Iteration)
Unwandlung: linear rekursiv -> repetitiv rekursive Funktion
	einbetten lin.rekurs.Funkt in allg.Funkt:
	Berechnung schrittweise vor rekurs.Aufruf abarbeiten, Hilfsparam. einführen

==========================================FUNKTIONEN============================================
Modularisierung mittels Funkt./Prozeduren von vielen Sprachen erlaubt ->häufig: Mischformen d.Konzepte
Def form.Param. im Funktionsrumpf, Normale/variable Param.realisierbar
Verwendung:Param.auf linker Zuweisungsseite entspricht Parameterkonzept v.Prozeduren 
"void": Realisierung von Prozeduren(funkt.ohne Rückgabewert)

---Aufrufsemantik:
Call by value: Def:void test(int x){} / Aufruf:test(3*5)
	Auswertung:Argument, dann Funktionsaufruf, Übergabe:Ergebnis
Call by reference: Def:void test(int *x){} / Aufruf: int a; test(&a);
	Umsetzung:Variablenparam, Realisierung:Zeiger/Adresskonzept:Übergabe: Referenz(^=Var.Adresse/Zeiger)

C++/Java: Konzepte ähnlich, Syntax leicht verschieden, Funkt/Prozeduren sind Methoden
C++: wahlweise CBV/CBR/Java: keine Zeigerarithm. mögl., Variablen:CBV,Objekte:Übergabe Referenz auf Obj.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++