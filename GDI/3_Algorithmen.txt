========================================================================================================096-161

Algorithmus: Verfahren/Vorschrift zur Lösung eines Problems
	durch def einer präzisen/endl. Beschreibung
		-Präzise: Beschreibungssprache genau definiert
		-Endlich: Beschreibung muss / Verfahren kann endlich sein
	effektive/elmentar Verarbeitungsschritte
		-Effektiv: mech. Ausführbar(vage)
		-Elementar: Einzelschritte: einfach/überschaubar/klar verständlich
Aufgabenstellung: Was tun (von vielen Alg.lösbar)/ Algorithmus: Wie tun(stark abh.von verfügb.elem. Schritte)

Spezifikation d. Aufgabe: was ist zu tun
Algorithmus/Datenstrukt.: Lösung entwerfen
Programm:				  Lösung realisieren

Rekursiver Alg: Definition stützt sich auf sich selbst / Vereinfachung d. Problems bei jedem Aufruf(endlich)

Informeller Alg: 
	Handlungsanweisungen nicht immer präzise: form.Beschreibungsspr.fehlt / Zielpublikum / Aufwand sehr hoch
	methodisch sinnvoll, doch vielfältige Interpret. -> Erg nicht streng vorhersagbar
	meist nicht präzise, effektiv -> Masch. verarb. erfordert präzise Sprache
Formeller Alg:
	Fest def. Syntax(Aufschreibung) / Klar def. Semantik(Bedeutung d.Sprachkonstrukte)
	
===============================================Formale Sprache===============================================
	Programm: Algorithmusbeschreibung / Programmiersprache: form.Sprachen für Algorithmen
	Verwendung: Compiler/Progr.sprachen/Komlexitäts-Berechenbarkeitstheorie/Kryptografie-analyse
	Festlegung: def durch Zeichenreihen über Zeichenvorrat:
		-Zeichenvorrat
		-zulässige Wörter: aufzahlen/Grammatik(Regelwerk gültiger Zeichenkomb.)

Arten form. Sprachen: (genaue Form: angepasst an Maschine)
	Textuell: Zeichenvorrat:Buchst./Ziffern/Sonderzeichen.. (Programmiersprachen)
	Grafisch: Zeichenvorrat: grafische Elem./ Gramatik beschr. korrekten Aufbau d. Grafik (Struktogramm)


==============================================Textersetung==================================================
einfache formale Alg.beschreibung: Ersetzen d. Teilworts durch Zeichenkette
	+endlich, präzise, elementar, effektiv, einfache Grundidee, elementare Maschine reicht
	-Regelwerke schnell umfangreich: schwer zu lesen/verifizieren
	==> Verwndung nur in theor. Informatik

Textersetungssystem: Endliche Menge von Regeln R über Zeichenvorrat V
Ersetung/Regel: (v,w) ∈ V* x V*		
	Notation: v -> W
	Ersetzung s->t heißt Anwendung einer Regel, wenn 
		A,w,v,z element Von V*: s= a O v O z und t=a O w O z 		(O = Konkatenation)
	Ablauf nicht eindeutik, falls mehrere Regeln anwendbar
 
	wenn Regel aus Textersetungssystem R auf  Wort s andwendbar:
		Regel auf s anwenden, Ergebniswort t ermitteln, Textersetung mit t forstetzen
	sonst:
		Textersetzung beenden

Markov Algorithmen: Deterministische Anwendung v. Textersetzungssystemen: falls: 
	mehrere Regeln anwendbar: zuerst notierte verwenden
	Regel an mehreren Stellen anwendbar: möglichst weit links im Wort anwenden

=============================================Turingmaschine==============================================
Alan Turing: alles mechanisch berechenbare: auf Maschine mit 6 primitiven Operationen reduzierbar
1.Beidseitig unendlich langes Speicherband+Felder, 	2.Lese/Schreibkopf, 
3.Steuerwerk: Zustand/Primitiv.Operationen, 		4.Turingtabelle(Programm)

Prim. Operationen: (SaFuK = Symbol auf Feld unter Kopf)
	RECHTS, LINKS (Kopf eine Position bewegen), NICHTS/HALT (Tue nichts)
	LESEN, DRUCKEN, LÖSCHEN (SaFuK)

Inhalt des Bandes: Symbole aus Zeichensatz, mind. ein "leeres Feld", mind ein anderes Symbol
endlich viele vordefinierte Zustände: 1 Anfangszustand, 1 Register/Speicherzelle mit aktuellem Zust.
Veränderungen bei Berechnung: 1. Zustand, 2. Inhalt d.Bandes, 3. Position d.Kopfes
	Turingtabelle(Programm) definiert gültige Zustandsübergänge

=============================Algorithmus Eigenschaften-Algorithmus heißt:=================================
	terminierend: endet stets nach endlichen Schritten
	deterministisch: keine Auswahl zwischen Verarbeitungsschritten in Ausführung
	determiniert: Resultat eindeutig bestimmt
	sequenziell: Verarbeitungsschritte hintereinander ausgeführt
	parallel: manche Schritte gleichzeitig ausgeführt
Elemente: Ausführung eines elementaren Schrittes, Seqenz(Abfolge von Schritten), Wiederholung
		  Fallunterscheidung über Bedingung, Rekursion, Modularisierung(Strukt.von Algorithmen)

==================Grafische Notation: intuitiv verständl/komplex:schnell unübersichtlich=================
1. Flussdiagramm/Programmablaufplan-strukturplan/Flowchart (DIN 66001)
	Kontrollelemente: Start/Stop, Verbindung, Bedingung 
	Aktionsknoten: Operation, Unterprogramm, Ein/Ausgabe
---------------------------------------------------------------------------------------------------------
2. Struktogramm/Nassi-Shneidermann-Diagramm (DIN 66261)
	Algorithmus beschr. Abfolge von Einzelschritten: Einzelschritt repräsentiert durch Block
	Eleme. Block: textuell Beschrieben, Komplexer: kapselt Blockkombinationen
	
	Sequenz: bestehend aus Sequenz von n Einzelblöcken B1...Bn
		Sequenzielles Ausführen, von oben nach unten(Reihenfolge), kein Block ausgelassen
	Fallunterscheidung: Schlüsselwörter:fett (true, false), Ablaufpfad kann von Bedingung abhängen 
	Auswahl: alternativ durch geschachtelte Fallunterscheidungen (Wert1..Wertn/sonst)
	Wiederholung: solange Eintrittsbedeingung erfüllt: Iteration (solange/while - bis/until)

Struktogramm für komplexen/umfangreichen Algorithmus: schnell unübersichtlich
-> mehrfach auftretende Abschnitte: Ausgliedern/mit Namen versehen/darauf verweisen(aufrufen)
Modul: in sich geschlossener Algorithmus: Einbauen in anderen Algorithmus, Parameterübergabe, Rekursion
	
Endlich, Elementar, nich vollst. Präzise(Elem.Schritte nich formal Def.), Textuelle Inhalte nicht Effektiv
--> Stuktogramme: semiformale Beschreibungstechnik: 
	werden zur formalen Sprache, wenn Elementarschritte formal beschrieben

===============================Rekursion: Alg. ruft sich selbst auf=======================================
Bei Rekursivem Aufruf: Anlagen einer Kopie des Rumpfes
Rekursive Algorithmen: problemorierntierter, kürzer, eleganter: rekursive Datenstrukturen
Iterative Algorithmen: maschinenorientierter, effektiver auszuführen: Speicher/Rechenzeit

===========================================Methodisches Vorgehen===========================================
Idee -Formul.-> Aufgabenstellung -Design-> Algorithmus -Progr.-> Programm -Codierung-> Maschinencode
Benötigt: Präzise Aufgabenstellungsbeschreibung (ideal: Form.Sprache)

Spezifikationen: gemachte Fehler ziehen sich über gesamten Entwicklungsprozess
	Präzise Anforderungsbeschreibung
	Definition d. Systemgrenzen
	vollständig/korrekt
Nutzen: Hilfsmittel, Gesamtüberblick, Erkennen pot.Schwierigkeiten, Vermeiden unnötigem Programmieraufwand,
	Grundlage: Vertrag zw. Auftraggeber/-nehmer
Falsches Programm: macht nicht das richtige/macht es nicht richtig

Ansätze:
Top-down: Prinzip der schrittweisen Verfeinerung		-> klare Strukturen
	Aufgabe in Teilaufgaben zerlegen, sukzessives wiederholen bis Teilaufgaben ^= elementare Schritte
Bottom-up: Teillösungen zu Problemlösung zusammenfügen	-> erleichtert Wiederverwendung
	Schichten bestehender Teillösungen modifizieren/erweitern/zu komplexerer Einheit gruppieren
praxis: hybrides Vorgehen

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++