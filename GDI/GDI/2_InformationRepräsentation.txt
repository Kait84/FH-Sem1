===================================================06.10.23============================================025-093

mentales Model(Problem) ----repräsentation----> Maschinenebene(Programm) 
andere Abstraktionsebenen: f. Masch. ausführbar, f. Menschen verständl.

INFORMATION:	<----Interpretation-----	REPRÄSENTATION:
Semantik		------Codierung--------> 	Syntax, Darstellung
-Bedeutung									-Daten

Syntax: was wir aufschreiben / Semantik: was es bedeuted

Information: Gehalt einer Aussage
Repräsenteation: Äußere Form
Interpreation/Abstraktion: Deutung d. Darstellung/Überg. z. Information(häufig nur gedanklich)
Codierung: Übergang Information zu Repräsentation

Information: nicht direkt aufschreibbar -> Darstellung zur masch.Verarb:
	Techn/schemantisch auswertbar 
	Präzision -> Eine Repräsentation: eine mögl. Interpretation / Versch.Info -> versch. dargestellt

Rechner arbeiten mit Bitfolgen n*8 (8/16/32/64 Bit)
	Bit/Binärzeichen: kleinste mögl Einheit v. Information: zwei Werte 	: gut in Rechner umsetzbar
		1 Bit mehr: doppelt so viele Bitfolgen: 	2^n
		4 Bit = Nibble/Halb-Byte	
		8 Bit = Byte
	Hexzeichen: 16 Werte =^ 4 Bit (Byte = 2 Hexstellen)		:technologisch effizient/f. Menschen besser erfassbar

Ziel: Schemantische, formale Darst. v. Infos durch Zeichenreihen
	Zeichenvorrat = endl. Menge unterscheidbarer Elem
	Alphabet = Zeichenvorrat lin. Ordnung (lexikographische Ordnung)
	Zeichen = Elem. in Zeichenvorrat
	Wort = Folge v. Zeichen aus ZV = Zeichenreihe/-folge/-kette/-sequenz
		ε = Leere Zeichenreiche
		Konkatenation [O] : aneinanderhängen v. Zeichenreihen
	Z* = Menge aller Wörter über ZV Z
	Z+ = Menge nichtleerer Wörter über Z

Ziel: Schemantische, formale Darst. v. Infos durch Zeichenreihen(dig. Repräs.)
Interpretation I:R -> A:
	R = Repräsentationssystem (Menge v. Repräs.)
	A = semantisches Modell	(Menge v. Inform.)
	(A, R, I) = Informationssystem
		(2, 02, 002: semantisch äquivalent / syntaktisch inäquivalent : untersch. Codierungen)
		je mehr Grundzeichen (zb hex) desto kürzer Codierung

Zeichenfolge hat nur mit Informationssystem Bedeutung 
	I2(): binär / I10(): dezimal (identität) / I16(): hexadezimal
	Für jede Info: versch. Darstellungsformen mögl / je nach Verwendungszweck untersch. gut geeignet

===============================================================================================================

Codierung: Abbildung zw Zeichen zweier Zeichenvorr. / muss injektiv(eindeutig) und umkehrbar(decodierung) sein
	(Fano Bedingung: Codierung muss Präfixfrei sein: Anfang eines Codes muss einzigartig sein)
Code: Bildmenge Codierungsabbildung (Mögl der Umwandlung, verschiedene Darstellungsformen benötigt)
Interpretation/Decodierung:
	Interpret.: ermittelt Bedeutung
	Decodierung: wandelt in andere Darstellungsform um (Umkehrabbildung einer Codierung)

Klassifizierung der Codes nach:	
-Zeichenvorrrat d. Wertebereichs
-Länge d. Codes:
	-var. Länge: Codewörter untersch. lang / Effizient: Häufig vorkommende Wörter: kurzes Codewort
		 schwierig zu decodieren : Zeichen für Wortende (z.B. \0)
	-fest. Länge: Codewörter gleich lang / techn leichter zu realisieren
		 techn. leichter realisierbar/meist verwendet: nur endliche informationen zu Codieren
		 z.B. Binärcodierung: höchstwertiges Bit links, niederwertigstes rechts

Stellenwertsystem nat.Zahlen: Koeffizient*Basis^Exponent (Basis abh. von Informationssystem)
			 	   N-1				[B:Basis d. Zahlensystems(B∈IN, B>=2)
	Allgemein:	n =	Σ bi * B^i 		[b:Ziffern (bi∈IN0, 0<=bi<=B)
				   i=0 				[N: Anzahl d. Stellen

	B=2:Dualsys		B=8:Oktalsys	B=10:Dezimalsys		B=16 Hexadezimalsys

Natürliche Zahlen-Umwandlung: |z=q*d+r| mit 0<=r<d
	div: ganzzahliger Quotient q=z div d
	mod: Divisionsrest r=z mod d
	z = (z div d) * d + (z mod d) => bei I2: b0 = z mod 2

Umwandlung nach Basis d:
	geg: z,d (!=0), Schreibmarke in Ergebnisfeld nach rechts setzen, wiederhole:
		1. b=z mod d | 2.output b | 3.Schreibmarke ein Feld weiter links setzen | 4.z = z div d
	abbrechen, wenn z=0

Stellenwertsystem gebrochene Zahlen: punkt(DE:Komma) trennt ganzzahligen/gebrochenen Teil
				   N-1				[B:Basis d. Zahlensystems(B∈IN, B>=2)
	Allgemein: n =	Σ bi * B^i 		[b:Ziffern (bi∈IN0, 0<=bi<=B)
				  i=-M				[N: Stellen vor Komma, M: Stellen nach Komma

Addition zweier Zahlen (Arithmetische Operationen gleich in Bin/Hex/Dez)
	(Übereinanderschreiben d. Zahlen, Aufsummieren d. Spalte, Übertrag zu höheren Spalte adddieren)
Übertrag: Summe einer Ziffernspalte größer gleich Baiswert => Übertragung auf nächst höheres Bit
Übertrag im 8. Bit: Carry
	Carry-Flag: Kontrollbit im Prozessor: zeigt Übertrag(bei arith.op.) im höchsten Bit an
	Prozessor liefert "oben abgeschnittenes" Ergebnis, setzt Carry-Flag =>> ABFANGEN(Programmier/er/sprache)

Bitweises Komplement: jedes Zeichen in Gegenteil wandeln(Bitweise Negation NOTbit): Ermittlung SEHR einfach

Darstellung Ganzer Zahlen: 1. Dir.Codierung d.Vorzeichens(Vorzeichendarstellung)/Zweierkomplement
	Vorzeichendarstellung: {-(2^n-1)+1 --> +(2^n-1)-1} Absolutwert wie sonst,vorne Vorzeichenbit(0="+", 1="-")
		- Null: doppelt(-0,+0) / rechnen: schwieriger
	Zweierkomplement: {-(2^n-1) --> +(2^n-1)-1} Nat. Zahlen wie üblich, von Untergrenze weiterzählen bis -1
		+ Eine Codierung d. Null / gewohnte einf. Arithmetik / Bereich frei wählbar
		- Assymetrischer Zahlenbereich
		1. Bilde Bitweises Zweierkomplement		2. addiere 1
	falsches Ergebnis nur bei echter Bereichsüberschreitung: zykl. Werteverg. nach -8 -> +7

Überlauf: "Echtes Ergebnis" nicht mehr im Zahlenbereich: Bereichsüberschreitung
	Übertrag im höchsten Bit: Hinweis: -> Overflow-Flag
	zweierkomplement: NICHT jeder Übertrag im höchstwertigen Bit auch Überlauf
	"normale" Binärdarstellung: JEDER Übertrag im höchsten Bit is Überlauf

Beliebige Zahlenformate möglich: praxis: 8,16,32,64 Bit
	in Programmiersprachen: Datentypen vordefiniert
	Format: so groß wie nötig(Überlauf vermeiden), so klein wie möglich(Platz/Speicher sparen)

==============================================================================================================

American Standard Code for Information Interchange ASCII: 7 Bit, 128 Zeichen
	128 Zeichen: 0000 0000 bis 0111 1111
	Ziffern: 0-9: 48-57|Großbuchstaben A-Z: 64-90|Kleinbuchstaben a-z: 97-122|Steuerzeichen: 0-31|math:32-47

ASCII-Erweiterung: 8 Bit: Versch. Varianten, daher Probleme Start/Zielrechner versch. Codierungen
	In Europa: Latin-1: ISO 8859-1

Weltweiter Datenaustausch:
Unicode: 16 Bit codierung: 65536 Zeichen: standardisiert: Universal Character Set(UCS)
	0-127: ASCII-Code, 128-255: ISO Latin-1			:teilweise Kompatibilitätsprobleme, doppelte Dateilänge

UCS Transformation Format(UTF): Standard
	UTF-8: Variante von Unicode: RFC2279 Internetgremien(Request for Comment)
	ASCII-Zeichen: 1 Byte, andere Zeichen: 2-6 Byte

Zeichenkette(String): Folge von Textzeichen
	Ende d. Zeichenreihe markiert durch NUL / 0x00 /Programmierung: \0: 	nullterminierter String
	Zahlen im Text: dargestellt gemäß Zeichensatz: viel Speicherverbrauch, zum Rechnen ungeeignet

===============================================================================================================
binäre Logik: wahr/falsch(true, false): zwei Wahrheitswerte: 1 Byte: F=0000 0000, T=1111 1111
	in C: false: 0, true: ganze Zahl != 0

Boolsche Algebra(George Boole): Datentyp:bool/boolean | Werte:true/false | Operationen:NOT/AND/OR...

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++