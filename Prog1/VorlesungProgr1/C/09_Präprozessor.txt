==========================PRÄPROZESSOR/preprocessor(=Textersetzungsmaschine)=============================189-
Aufgaben: bedingte Kompilierung, Ersetzen von Text, Einfügen von Dateien	|
Syntax einer Präprozessor-Direktive/Präprozessor-Befehl: 					| #Direktive Text
Präprozessor-Befehle enden mit Zeilenende Zeichen/Zeilenumbruch
[Quellcode(.c) --Präprozessor-> Quellcode(.c) --Compiler-> Objektcode(.o) --Linker-> Programm(.exe)...]


------------------------------Symbolische Konstanten, Makros mit Parametern----------------------------------

------Ersetzen von Text(i.d.ganzen Datei): 				| #define Bezeichner Ersatztext
Ersetzen, während Prärozessor-Laufs, beginnt ab Stelle der Direktive bis Dateiende
ersetzt werden: komplette Namen / nicht ersetzt: Substring in Namen, Zeichenketten, andere PP-Anweisung
Aufhebung der eingeführten Makrodefinition				| #undef Bezeichner

Makro: alles in define definierte: Parameter werden übergeben
-Makro ohne Parameter: symbolische Konstante(CAPS-Schreibweise)
-Makros mit Parametern: durch Parameterliste			| #define Bezeichner(Param1,...,ParamN) Ersatztext
	Verwendung wie Funktion: y = Bezeichner(Param);	
	+Laufzeit: höhere Geschwindigkeit als bei Funktionsaufruf: keine Parameterübergabe
	-Speicherbedarf: Rumpf wird expandiert/Code wird Länger
	-ungewollte Bindung in Ausdruck, ungewollte Blockstruktur -> Vollständige Klammerung z.B.((x)*(x))

------Bedingte Kompilierung: Entscheidung anhand v.Ausdrücken/Symbolen, welcher Teil d.SC kompiliert wird
nicht in Frage kommender Source-Code(Programmteile in false-interpretiertem Zweig) wird von PP entfernt 
[Verwendung: untersch.OS/Prozessoren/Testerversion]
Direktiven: 	#if konst_Ausdr 	#elif konst_Ausdr 	#else	}#endif	
				#ifdef Symbol 		#ifndef Symbol				}	(ifdef(Makro_definiert))

------Einfügen von Dateien (in temp. Kompilerdatei)	| #incluce "filename", #include <filename>
Zeile der Präprozessordirektive wird entfernt,		| <>: Systemdatei in Include-Verzeichnissen (/usr/include)
Quelltext wird in Datei eingefügt, 					| "": Suche zuerst in aktuellem Arbeitsverzeichnis
include-Anweisung innerhalb eingefügter Datei wird auch ausgeführt
Verwendung für Definition von : -Typnamen. , -Konstanten, -Funktionen , -Makros

--------------------------------------------Bit-Operationen--------------------------------------------
-----Logische Bit-Operatoren: Bitweises... "&"=AND, "|"=OR, "^"=XOR(Circumflex), "~"=NOT(Tilde)
dürfen nur für ganzzahlige Datentypen benutzt werden(vorzeichenbehaftet:implementierungsabh.Aspekte)
Anwendung auf allen Bits d.Operanden / Verknüpfung der Bits der jeweiligen Position
infix: &,|,^ / präfix: ~

Flags: binäre Zahl, Verwendung zur Kennzeichnung best.Zustände (setzen, löschen, lesen)[unsigned x]
Verwendung logischer Bit-Operatoren mit Masken zum Zugriff auf einzelne Flags:
	[a operator= zuveränderndeStelle]
	setzen: mit bitw.ODER-Operator (Bits, in Bitmaske=1: setzen auf "1" / in Maske=0: unverändert)
	löschen: mit bitw.UND-Operator (Bits, in Bitmaske=0: löschen / in Maske=1: unverändert)
	lesen: mit bitw.UND-Operator (Bitmaske: an zu prüfenden Stellen=1, sonst:0(maskierung/ausblendung))
	invertieren/toggeln: mit bitw.XOR-Operator (Bits, in Bitmaske=1: invertieren / sonst: unverändert)

-----Shift-Operatoren


--211