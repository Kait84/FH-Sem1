=============================================Objektorientierung2=======================================325-356
-----Statische Attribute und Methoden:
Statische Attribute in Klassen: Attribute, die zu Klasse gehören (statt zu Objekt)
	existieren pro Klasse exakt einmal, haben für alle Objekte d.selben Wert, 
	werden vor erstem Objekt d.Klasse angelegt ->Konstruktor kann nicht zur Initialisierung verwendet werden
	statische Attribute in Klasse durch vorangestelltes static gekennzeichnet [static int anzahl;]
	Deklaration (private)legt keine Instanz d.statischen Attributs an -> def in Quellcodedatei wie glob.Var
	Zugriff mit Scope Resolution Operator(int Rad::anzahl=0), sollten bei Definition initialisiert werden
	Zugriff immer über Klassennamen (statt Objektnamen)
	Öffentliche Getter-Methoden: Deklaration als statische Methoden(=Schnittstelle zu stat.Klassenattributen)
	können auch ohne Objekt aufgerufen werden -> Zugriff nur auf statisch Attr.
	-->Statische Elem.gehören zur Klasse, nichtstatische gehören zu bestimmten Objekten

Konstante Methoden: Funktionsparam. als konstant deklariert
	Ist Parameter Zeiger auf konstantes Objekt: kein verändernder Zugriff auf Objekt
	deutlichmachen für Compiler, dass Methode Datenelement nicht ändert: als konstant deklarieren:
		[ parameterklasse() const{...} ] 		:Zugriff auf konstante Obj.möglich
		:immer, wenn Methode nur lesend auf Elemente zugreift

Friend Funktionen: in Klasse: Funktionsdeklaration als friend
	Deklaration außerhalb der Klasse/kein Member d.Klasse
	Zugriff auf private Members gewährt -> Funktion kann dir. auf private Attribute zugreifen
	deklaration einer friend klasse innerhalb anderer Klasse -> 
		alle Methoden der Klasse: Zugriff auf alle Attribute d.Klasse

Vererbung: Fälle: Klasse ist Spezialisierung/Erweiterung/vereint Eigenschaften mehrerer Funkt.
		aus mehreren parallel entwickelten Klassen: gemeinsamer Kern: Funktion/Benutzung
	Attribute werden an Unterfunktion vererbt + spezielle Eigenschaften(dann abgeleitete Klasse)
		Ableitung: Erzeugen einer Unterklasse aus existierenden Klasse (+neue Elem:Spezialisierung)
		Generalisierung: Erzeugen einer Oberklasse aus existierenden Klasse
	Abgeleitete Klassen: alle Methoden/Daten d.Basisklassen + weitere + können sie überschreiben(verschatten)
	Objekt einer Unterklasse kann verwendet werden wo Objekt der Oberklasse erwartet wird(nicht umgekehrt!)

	abgeleitete Klasse|Sub-/Unter-/Kindklasse "ist ein" Basisklasse|Ober-/Super-/Elternklasse



--341