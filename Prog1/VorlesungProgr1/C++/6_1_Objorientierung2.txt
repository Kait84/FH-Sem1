=============================================Objektorientierung2=======================================325-355
-----Statische Attribute und Methoden:
Statische Attribute in Klassen: Attribute, die zu Klasse gehören (statt zu Objekt)
	existieren pro Klasse exakt einmal, haben für alle Objekte d.selben Wert, 
	werden vor erstem Objekt d.Klasse angelegt ->Konstruktor kann nicht zur Initialisierung verwendet werden
	statische Attribute in Klasse durch vorangestelltes static gekennzeichnet [static int anzahl;]
	Deklaration (private)legt keine Instanz d.statischen Attributs an -> def in Quellcodedatei wie glob.Var
	Zugriff mit Scope Resolution Operator(int Rad::anzahl=0), sollten bei Definition initialisiert werden
	Zugriff immer über Klassennamen (statt Objektnamen)
	Öffentliche Getter-Methoden: Deklaration als statische Methoden(=Schnittstelle zu stat.Klassenattributen)
	können auch ohne Objekt aufgerufen werden -> Zugriff nur auf statisch Attr.
	-->Statische Elem.gehören zur Klasse, nichtstatische gehören zu bestimmten Objekten

-----Konstante Methoden: Funktionsparam. als konstant deklariert
	Ist Parameter Zeiger auf konstantes Objekt: kein verändernder Zugriff auf Objekt
	deutlichmachen für Compiler, dass Methode Datenelement nicht ändert: als konstant deklarieren:
		[ parameterklasse() const{...} ] 		:Zugriff auf konstante Obj.möglich
		:immer, wenn Methode nur lesend auf Elemente zugreift

-----Friend Funktionen: in Klasse: Funktionsdeklaration als friend
	Deklaration außerhalb der Klasse/kein Member d.Klasse
	Zugriff auf private Members gewährt -> Funktion kann dir. auf private Attribute zugreifen
	deklaration einer friend klasse innerhalb anderer Klasse -> 
		alle Methoden der Klasse: Zugriff auf alle Attribute d.Klasse

-----Vererbung: Ableitung von Klassen aus andern Klassen
	abgeleitete Klasse/Sub-/Unter-/Kindklasse "ist-eine" Basisklasse/Ober-/Super-/Elternklasse
	Abgeleitete Klassen: enthalten/überschreiben(verschatten) Methoden/Daten der Basisklassen + weitere

	Klassen: (gemeinsamer Kern mehrerer Klassen bez. Funktion/Benutzung)
		-Spezialisieren/Erweitern vorhandene Klassen(Oberklassen vererben Attribute/Methoden an Unterklasse)
			Ableitung: Erzeugung einer abgeleiteten Klasse aus Basisklasse
			[ class unterklasse:public oberklasse{...} ]
		-Generalisieren Klassen (vereinen Eigenschaften vorhandener Klassen)
			Generalisierung: aus existierenden Klassen wird Oberklasse erzeugt
			[ class oberklasse:public unterklasse1, public unterklasse2{...} ]
	Objekt einer Unterklasse kann immer verwendet werden, wenn Oberklasse erwartet wird (nicht umgekehrt)

	Öffentliche/public Klassen: zur Basisklasse zuweisungskompatibel(enthalten Schnittstelle d.Basisklasse)
		umgekehrt nicht möglich
	Zuweisung von Oberklasse zu Unterklasse möglich, dann Information d.Unterklase verloren
	Zuweisung eines Zeigers auf Basisklasse an abgeleitete Klasse: keine Informationen gehen verloren

	durch public-Ableitung gelten in Basisklasse definierten Zugriffsrechte auch für abgeleitete Klasse
		abgeleitete Klasse kann nur auf public-Elemente der Basisklasse zugreifen
		--> protected: private für Zugriff von "außen", public für Zugriff von "innen"
	durch private-Ableitung: öffentliche Elem.d.Basisklasse werden in abgeleiteter Klasse privat
		[default Ableitungsart], kaum nützlich
		Objekte der abgeleiteten Klasse können nicht Basisklasse zugewiesen werden(Schutzrechte)

	|--Zugriff--|-von-außen-|-von-innen-|
	------------------------------------
	| private	| unmöglich	| unmöglich	|
	| protected	| unmöglich	| möglich 	|
	| public 	| möglich 	| möglich 	|

	Definition eines Objektes:immer Konstruktoraufruf
		hat es Basisklassen: Objekt d.Basisklase erzeugt, Aufruf der Konstruktoren aller Basisklassen
		Konstruktor: 1. Start d.Standardkonst.d.Basisklasse, 2.Ausführung Konstr.d.abgeleiteten Klasse
		Dekonstruktor: 1.Dekonstruktoren d.abgeleiteten Klassen, 2.Standarddekonstr. d.Basisklasse


--346



-----Überschreiben von Methoden:
-----Mehrfachvererbung:
	--Diamond Problem:
